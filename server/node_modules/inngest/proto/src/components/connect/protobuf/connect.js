"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: src/components/connect/protobuf/connect.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.SystemError = exports.PubSubAckMessage = exports.FlushResponse = exports.StartRequest = exports.StartResponse = exports.ConnGroup = exports.SystemAttributes = exports.ConnMetadata_SyncedWorkerGroupsEntry = exports.ConnMetadata_AllWorkerGroupsEntry = exports.ConnMetadata = exports.WorkerReplyAckData = exports.SDKResponse = exports.WorkerRequestExtendLeaseAckData = exports.WorkerRequestExtendLeaseData = exports.WorkerRequestAckData = exports.GatewayExecutorRequestData = exports.GatewayConnectionReadyData = exports.WorkerConnectRequestData = exports.AuthData = exports.AppConfiguration = exports.ConnectMessage = exports.WorkerDisconnectReason = exports.ConnectionStatus = exports.SDKResponseStatus = exports.GatewayMessageType = exports.protobufPackage = void 0;
exports.gatewayMessageTypeFromJSON = gatewayMessageTypeFromJSON;
exports.gatewayMessageTypeToJSON = gatewayMessageTypeToJSON;
exports.sDKResponseStatusFromJSON = sDKResponseStatusFromJSON;
exports.sDKResponseStatusToJSON = sDKResponseStatusToJSON;
exports.connectionStatusFromJSON = connectionStatusFromJSON;
exports.connectionStatusToJSON = connectionStatusToJSON;
exports.workerDisconnectReasonFromJSON = workerDisconnectReasonFromJSON;
exports.workerDisconnectReasonToJSON = workerDisconnectReasonToJSON;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const timestamp_1 = require("../../../../google/protobuf/timestamp");
exports.protobufPackage = "connect.v1";
var GatewayMessageType;
(function (GatewayMessageType) {
    GatewayMessageType[GatewayMessageType["GATEWAY_HELLO"] = 0] = "GATEWAY_HELLO";
    GatewayMessageType[GatewayMessageType["WORKER_CONNECT"] = 1] = "WORKER_CONNECT";
    GatewayMessageType[GatewayMessageType["GATEWAY_CONNECTION_READY"] = 2] = "GATEWAY_CONNECTION_READY";
    GatewayMessageType[GatewayMessageType["GATEWAY_EXECUTOR_REQUEST"] = 3] = "GATEWAY_EXECUTOR_REQUEST";
    GatewayMessageType[GatewayMessageType["WORKER_READY"] = 4] = "WORKER_READY";
    GatewayMessageType[GatewayMessageType["WORKER_REQUEST_ACK"] = 5] = "WORKER_REQUEST_ACK";
    GatewayMessageType[GatewayMessageType["WORKER_REQUEST_EXTEND_LEASE"] = 12] = "WORKER_REQUEST_EXTEND_LEASE";
    GatewayMessageType[GatewayMessageType["WORKER_REQUEST_EXTEND_LEASE_ACK"] = 13] = "WORKER_REQUEST_EXTEND_LEASE_ACK";
    GatewayMessageType[GatewayMessageType["WORKER_REPLY"] = 6] = "WORKER_REPLY";
    GatewayMessageType[GatewayMessageType["WORKER_REPLY_ACK"] = 7] = "WORKER_REPLY_ACK";
    GatewayMessageType[GatewayMessageType["WORKER_PAUSE"] = 8] = "WORKER_PAUSE";
    GatewayMessageType[GatewayMessageType["WORKER_HEARTBEAT"] = 9] = "WORKER_HEARTBEAT";
    GatewayMessageType[GatewayMessageType["GATEWAY_HEARTBEAT"] = 10] = "GATEWAY_HEARTBEAT";
    GatewayMessageType[GatewayMessageType["GATEWAY_CLOSING"] = 11] = "GATEWAY_CLOSING";
    GatewayMessageType[GatewayMessageType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(GatewayMessageType || (exports.GatewayMessageType = GatewayMessageType = {}));
function gatewayMessageTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "GATEWAY_HELLO":
            return GatewayMessageType.GATEWAY_HELLO;
        case 1:
        case "WORKER_CONNECT":
            return GatewayMessageType.WORKER_CONNECT;
        case 2:
        case "GATEWAY_CONNECTION_READY":
            return GatewayMessageType.GATEWAY_CONNECTION_READY;
        case 3:
        case "GATEWAY_EXECUTOR_REQUEST":
            return GatewayMessageType.GATEWAY_EXECUTOR_REQUEST;
        case 4:
        case "WORKER_READY":
            return GatewayMessageType.WORKER_READY;
        case 5:
        case "WORKER_REQUEST_ACK":
            return GatewayMessageType.WORKER_REQUEST_ACK;
        case 12:
        case "WORKER_REQUEST_EXTEND_LEASE":
            return GatewayMessageType.WORKER_REQUEST_EXTEND_LEASE;
        case 13:
        case "WORKER_REQUEST_EXTEND_LEASE_ACK":
            return GatewayMessageType.WORKER_REQUEST_EXTEND_LEASE_ACK;
        case 6:
        case "WORKER_REPLY":
            return GatewayMessageType.WORKER_REPLY;
        case 7:
        case "WORKER_REPLY_ACK":
            return GatewayMessageType.WORKER_REPLY_ACK;
        case 8:
        case "WORKER_PAUSE":
            return GatewayMessageType.WORKER_PAUSE;
        case 9:
        case "WORKER_HEARTBEAT":
            return GatewayMessageType.WORKER_HEARTBEAT;
        case 10:
        case "GATEWAY_HEARTBEAT":
            return GatewayMessageType.GATEWAY_HEARTBEAT;
        case 11:
        case "GATEWAY_CLOSING":
            return GatewayMessageType.GATEWAY_CLOSING;
        case -1:
        case "UNRECOGNIZED":
        default:
            return GatewayMessageType.UNRECOGNIZED;
    }
}
function gatewayMessageTypeToJSON(object) {
    switch (object) {
        case GatewayMessageType.GATEWAY_HELLO:
            return "GATEWAY_HELLO";
        case GatewayMessageType.WORKER_CONNECT:
            return "WORKER_CONNECT";
        case GatewayMessageType.GATEWAY_CONNECTION_READY:
            return "GATEWAY_CONNECTION_READY";
        case GatewayMessageType.GATEWAY_EXECUTOR_REQUEST:
            return "GATEWAY_EXECUTOR_REQUEST";
        case GatewayMessageType.WORKER_READY:
            return "WORKER_READY";
        case GatewayMessageType.WORKER_REQUEST_ACK:
            return "WORKER_REQUEST_ACK";
        case GatewayMessageType.WORKER_REQUEST_EXTEND_LEASE:
            return "WORKER_REQUEST_EXTEND_LEASE";
        case GatewayMessageType.WORKER_REQUEST_EXTEND_LEASE_ACK:
            return "WORKER_REQUEST_EXTEND_LEASE_ACK";
        case GatewayMessageType.WORKER_REPLY:
            return "WORKER_REPLY";
        case GatewayMessageType.WORKER_REPLY_ACK:
            return "WORKER_REPLY_ACK";
        case GatewayMessageType.WORKER_PAUSE:
            return "WORKER_PAUSE";
        case GatewayMessageType.WORKER_HEARTBEAT:
            return "WORKER_HEARTBEAT";
        case GatewayMessageType.GATEWAY_HEARTBEAT:
            return "GATEWAY_HEARTBEAT";
        case GatewayMessageType.GATEWAY_CLOSING:
            return "GATEWAY_CLOSING";
        case GatewayMessageType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
var SDKResponseStatus;
(function (SDKResponseStatus) {
    SDKResponseStatus[SDKResponseStatus["NOT_COMPLETED"] = 0] = "NOT_COMPLETED";
    SDKResponseStatus[SDKResponseStatus["DONE"] = 1] = "DONE";
    SDKResponseStatus[SDKResponseStatus["ERROR"] = 2] = "ERROR";
    SDKResponseStatus[SDKResponseStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(SDKResponseStatus || (exports.SDKResponseStatus = SDKResponseStatus = {}));
function sDKResponseStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "NOT_COMPLETED":
            return SDKResponseStatus.NOT_COMPLETED;
        case 1:
        case "DONE":
            return SDKResponseStatus.DONE;
        case 2:
        case "ERROR":
            return SDKResponseStatus.ERROR;
        case -1:
        case "UNRECOGNIZED":
        default:
            return SDKResponseStatus.UNRECOGNIZED;
    }
}
function sDKResponseStatusToJSON(object) {
    switch (object) {
        case SDKResponseStatus.NOT_COMPLETED:
            return "NOT_COMPLETED";
        case SDKResponseStatus.DONE:
            return "DONE";
        case SDKResponseStatus.ERROR:
            return "ERROR";
        case SDKResponseStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
var ConnectionStatus;
(function (ConnectionStatus) {
    ConnectionStatus[ConnectionStatus["CONNECTED"] = 0] = "CONNECTED";
    ConnectionStatus[ConnectionStatus["READY"] = 1] = "READY";
    ConnectionStatus[ConnectionStatus["DRAINING"] = 2] = "DRAINING";
    ConnectionStatus[ConnectionStatus["DISCONNECTING"] = 3] = "DISCONNECTING";
    ConnectionStatus[ConnectionStatus["DISCONNECTED"] = 4] = "DISCONNECTED";
    ConnectionStatus[ConnectionStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ConnectionStatus || (exports.ConnectionStatus = ConnectionStatus = {}));
function connectionStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "CONNECTED":
            return ConnectionStatus.CONNECTED;
        case 1:
        case "READY":
            return ConnectionStatus.READY;
        case 2:
        case "DRAINING":
            return ConnectionStatus.DRAINING;
        case 3:
        case "DISCONNECTING":
            return ConnectionStatus.DISCONNECTING;
        case 4:
        case "DISCONNECTED":
            return ConnectionStatus.DISCONNECTED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ConnectionStatus.UNRECOGNIZED;
    }
}
function connectionStatusToJSON(object) {
    switch (object) {
        case ConnectionStatus.CONNECTED:
            return "CONNECTED";
        case ConnectionStatus.READY:
            return "READY";
        case ConnectionStatus.DRAINING:
            return "DRAINING";
        case ConnectionStatus.DISCONNECTING:
            return "DISCONNECTING";
        case ConnectionStatus.DISCONNECTED:
            return "DISCONNECTED";
        case ConnectionStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
var WorkerDisconnectReason;
(function (WorkerDisconnectReason) {
    WorkerDisconnectReason[WorkerDisconnectReason["WORKER_SHUTDOWN"] = 0] = "WORKER_SHUTDOWN";
    WorkerDisconnectReason[WorkerDisconnectReason["UNEXPECTED"] = 1] = "UNEXPECTED";
    WorkerDisconnectReason[WorkerDisconnectReason["GATEWAY_DRAINING"] = 2] = "GATEWAY_DRAINING";
    WorkerDisconnectReason[WorkerDisconnectReason["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(WorkerDisconnectReason || (exports.WorkerDisconnectReason = WorkerDisconnectReason = {}));
function workerDisconnectReasonFromJSON(object) {
    switch (object) {
        case 0:
        case "WORKER_SHUTDOWN":
            return WorkerDisconnectReason.WORKER_SHUTDOWN;
        case 1:
        case "UNEXPECTED":
            return WorkerDisconnectReason.UNEXPECTED;
        case 2:
        case "GATEWAY_DRAINING":
            return WorkerDisconnectReason.GATEWAY_DRAINING;
        case -1:
        case "UNRECOGNIZED":
        default:
            return WorkerDisconnectReason.UNRECOGNIZED;
    }
}
function workerDisconnectReasonToJSON(object) {
    switch (object) {
        case WorkerDisconnectReason.WORKER_SHUTDOWN:
            return "WORKER_SHUTDOWN";
        case WorkerDisconnectReason.UNEXPECTED:
            return "UNEXPECTED";
        case WorkerDisconnectReason.GATEWAY_DRAINING:
            return "GATEWAY_DRAINING";
        case WorkerDisconnectReason.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseConnectMessage() {
    return { kind: 0, payload: new Uint8Array(0) };
}
exports.ConnectMessage = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.kind !== 0) {
            writer.uint32(8).int32(message.kind);
        }
        if (message.payload.length !== 0) {
            writer.uint32(18).bytes(message.payload);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConnectMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.kind = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.payload = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            kind: isSet(object.kind) ? gatewayMessageTypeFromJSON(object.kind) : 0,
            payload: isSet(object.payload) ? bytesFromBase64(object.payload) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.kind !== 0) {
            obj.kind = gatewayMessageTypeToJSON(message.kind);
        }
        if (message.payload.length !== 0) {
            obj.payload = base64FromBytes(message.payload);
        }
        return obj;
    },
    create(base) {
        return exports.ConnectMessage.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseConnectMessage();
        message.kind = (_a = object.kind) !== null && _a !== void 0 ? _a : 0;
        message.payload = (_b = object.payload) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        return message;
    },
};
function createBaseAppConfiguration() {
    return { appName: "", appVersion: undefined, functions: new Uint8Array(0) };
}
exports.AppConfiguration = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.appName !== "") {
            writer.uint32(10).string(message.appName);
        }
        if (message.appVersion !== undefined) {
            writer.uint32(18).string(message.appVersion);
        }
        if (message.functions.length !== 0) {
            writer.uint32(34).bytes(message.functions);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppConfiguration();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.appName = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.appVersion = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.functions = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            appName: isSet(object.appName) ? globalThis.String(object.appName) : "",
            appVersion: isSet(object.appVersion) ? globalThis.String(object.appVersion) : undefined,
            functions: isSet(object.functions) ? bytesFromBase64(object.functions) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.appName !== "") {
            obj.appName = message.appName;
        }
        if (message.appVersion !== undefined) {
            obj.appVersion = message.appVersion;
        }
        if (message.functions.length !== 0) {
            obj.functions = base64FromBytes(message.functions);
        }
        return obj;
    },
    create(base) {
        return exports.AppConfiguration.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseAppConfiguration();
        message.appName = (_a = object.appName) !== null && _a !== void 0 ? _a : "";
        message.appVersion = (_b = object.appVersion) !== null && _b !== void 0 ? _b : undefined;
        message.functions = (_c = object.functions) !== null && _c !== void 0 ? _c : new Uint8Array(0);
        return message;
    },
};
function createBaseAuthData() {
    return { sessionToken: "", syncToken: "" };
}
exports.AuthData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sessionToken !== "") {
            writer.uint32(10).string(message.sessionToken);
        }
        if (message.syncToken !== "") {
            writer.uint32(18).string(message.syncToken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAuthData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sessionToken = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.syncToken = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sessionToken: isSet(object.sessionToken) ? globalThis.String(object.sessionToken) : "",
            syncToken: isSet(object.syncToken) ? globalThis.String(object.syncToken) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sessionToken !== "") {
            obj.sessionToken = message.sessionToken;
        }
        if (message.syncToken !== "") {
            obj.syncToken = message.syncToken;
        }
        return obj;
    },
    create(base) {
        return exports.AuthData.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAuthData();
        message.sessionToken = (_a = object.sessionToken) !== null && _a !== void 0 ? _a : "";
        message.syncToken = (_b = object.syncToken) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseWorkerConnectRequestData() {
    return {
        connectionId: "",
        instanceId: "",
        authData: undefined,
        capabilities: new Uint8Array(0),
        apps: [],
        workerManualReadinessAck: false,
        systemAttributes: undefined,
        environment: undefined,
        framework: "",
        platform: undefined,
        sdkVersion: "",
        sdkLanguage: "",
        startedAt: undefined,
    };
}
exports.WorkerConnectRequestData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.connectionId !== "") {
            writer.uint32(10).string(message.connectionId);
        }
        if (message.instanceId !== "") {
            writer.uint32(18).string(message.instanceId);
        }
        if (message.authData !== undefined) {
            exports.AuthData.encode(message.authData, writer.uint32(26).fork()).join();
        }
        if (message.capabilities.length !== 0) {
            writer.uint32(34).bytes(message.capabilities);
        }
        for (const v of message.apps) {
            exports.AppConfiguration.encode(v, writer.uint32(42).fork()).join();
        }
        if (message.workerManualReadinessAck !== false) {
            writer.uint32(48).bool(message.workerManualReadinessAck);
        }
        if (message.systemAttributes !== undefined) {
            exports.SystemAttributes.encode(message.systemAttributes, writer.uint32(58).fork()).join();
        }
        if (message.environment !== undefined) {
            writer.uint32(66).string(message.environment);
        }
        if (message.framework !== "") {
            writer.uint32(74).string(message.framework);
        }
        if (message.platform !== undefined) {
            writer.uint32(82).string(message.platform);
        }
        if (message.sdkVersion !== "") {
            writer.uint32(90).string(message.sdkVersion);
        }
        if (message.sdkLanguage !== "") {
            writer.uint32(98).string(message.sdkLanguage);
        }
        if (message.startedAt !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.startedAt), writer.uint32(106).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWorkerConnectRequestData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.connectionId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.instanceId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.authData = exports.AuthData.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.capabilities = reader.bytes();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.apps.push(exports.AppConfiguration.decode(reader, reader.uint32()));
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.workerManualReadinessAck = reader.bool();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.systemAttributes = exports.SystemAttributes.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.environment = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.framework = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.platform = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.sdkVersion = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.sdkLanguage = reader.string();
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.startedAt = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            connectionId: isSet(object.connectionId) ? globalThis.String(object.connectionId) : "",
            instanceId: isSet(object.instanceId) ? globalThis.String(object.instanceId) : "",
            authData: isSet(object.authData) ? exports.AuthData.fromJSON(object.authData) : undefined,
            capabilities: isSet(object.capabilities) ? bytesFromBase64(object.capabilities) : new Uint8Array(0),
            apps: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.apps) ? object.apps.map((e) => exports.AppConfiguration.fromJSON(e)) : [],
            workerManualReadinessAck: isSet(object.workerManualReadinessAck)
                ? globalThis.Boolean(object.workerManualReadinessAck)
                : false,
            systemAttributes: isSet(object.systemAttributes) ? exports.SystemAttributes.fromJSON(object.systemAttributes) : undefined,
            environment: isSet(object.environment) ? globalThis.String(object.environment) : undefined,
            framework: isSet(object.framework) ? globalThis.String(object.framework) : "",
            platform: isSet(object.platform) ? globalThis.String(object.platform) : undefined,
            sdkVersion: isSet(object.sdkVersion) ? globalThis.String(object.sdkVersion) : "",
            sdkLanguage: isSet(object.sdkLanguage) ? globalThis.String(object.sdkLanguage) : "",
            startedAt: isSet(object.startedAt) ? fromJsonTimestamp(object.startedAt) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.connectionId !== "") {
            obj.connectionId = message.connectionId;
        }
        if (message.instanceId !== "") {
            obj.instanceId = message.instanceId;
        }
        if (message.authData !== undefined) {
            obj.authData = exports.AuthData.toJSON(message.authData);
        }
        if (message.capabilities.length !== 0) {
            obj.capabilities = base64FromBytes(message.capabilities);
        }
        if ((_a = message.apps) === null || _a === void 0 ? void 0 : _a.length) {
            obj.apps = message.apps.map((e) => exports.AppConfiguration.toJSON(e));
        }
        if (message.workerManualReadinessAck !== false) {
            obj.workerManualReadinessAck = message.workerManualReadinessAck;
        }
        if (message.systemAttributes !== undefined) {
            obj.systemAttributes = exports.SystemAttributes.toJSON(message.systemAttributes);
        }
        if (message.environment !== undefined) {
            obj.environment = message.environment;
        }
        if (message.framework !== "") {
            obj.framework = message.framework;
        }
        if (message.platform !== undefined) {
            obj.platform = message.platform;
        }
        if (message.sdkVersion !== "") {
            obj.sdkVersion = message.sdkVersion;
        }
        if (message.sdkLanguage !== "") {
            obj.sdkLanguage = message.sdkLanguage;
        }
        if (message.startedAt !== undefined) {
            obj.startedAt = message.startedAt.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.WorkerConnectRequestData.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const message = createBaseWorkerConnectRequestData();
        message.connectionId = (_a = object.connectionId) !== null && _a !== void 0 ? _a : "";
        message.instanceId = (_b = object.instanceId) !== null && _b !== void 0 ? _b : "";
        message.authData = (object.authData !== undefined && object.authData !== null)
            ? exports.AuthData.fromPartial(object.authData)
            : undefined;
        message.capabilities = (_c = object.capabilities) !== null && _c !== void 0 ? _c : new Uint8Array(0);
        message.apps = ((_d = object.apps) === null || _d === void 0 ? void 0 : _d.map((e) => exports.AppConfiguration.fromPartial(e))) || [];
        message.workerManualReadinessAck = (_e = object.workerManualReadinessAck) !== null && _e !== void 0 ? _e : false;
        message.systemAttributes = (object.systemAttributes !== undefined && object.systemAttributes !== null)
            ? exports.SystemAttributes.fromPartial(object.systemAttributes)
            : undefined;
        message.environment = (_f = object.environment) !== null && _f !== void 0 ? _f : undefined;
        message.framework = (_g = object.framework) !== null && _g !== void 0 ? _g : "";
        message.platform = (_h = object.platform) !== null && _h !== void 0 ? _h : undefined;
        message.sdkVersion = (_j = object.sdkVersion) !== null && _j !== void 0 ? _j : "";
        message.sdkLanguage = (_k = object.sdkLanguage) !== null && _k !== void 0 ? _k : "";
        message.startedAt = (_l = object.startedAt) !== null && _l !== void 0 ? _l : undefined;
        return message;
    },
};
function createBaseGatewayConnectionReadyData() {
    return { heartbeatInterval: "", extendLeaseInterval: "" };
}
exports.GatewayConnectionReadyData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.heartbeatInterval !== "") {
            writer.uint32(10).string(message.heartbeatInterval);
        }
        if (message.extendLeaseInterval !== "") {
            writer.uint32(18).string(message.extendLeaseInterval);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGatewayConnectionReadyData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.heartbeatInterval = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.extendLeaseInterval = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            heartbeatInterval: isSet(object.heartbeatInterval) ? globalThis.String(object.heartbeatInterval) : "",
            extendLeaseInterval: isSet(object.extendLeaseInterval) ? globalThis.String(object.extendLeaseInterval) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.heartbeatInterval !== "") {
            obj.heartbeatInterval = message.heartbeatInterval;
        }
        if (message.extendLeaseInterval !== "") {
            obj.extendLeaseInterval = message.extendLeaseInterval;
        }
        return obj;
    },
    create(base) {
        return exports.GatewayConnectionReadyData.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGatewayConnectionReadyData();
        message.heartbeatInterval = (_a = object.heartbeatInterval) !== null && _a !== void 0 ? _a : "";
        message.extendLeaseInterval = (_b = object.extendLeaseInterval) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGatewayExecutorRequestData() {
    return {
        requestId: "",
        accountId: "",
        envId: "",
        appId: "",
        appName: "",
        functionId: "",
        functionSlug: "",
        stepId: undefined,
        requestPayload: new Uint8Array(0),
        systemTraceCtx: new Uint8Array(0),
        userTraceCtx: new Uint8Array(0),
        runId: "",
        leaseId: "",
    };
}
exports.GatewayExecutorRequestData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        if (message.accountId !== "") {
            writer.uint32(18).string(message.accountId);
        }
        if (message.envId !== "") {
            writer.uint32(26).string(message.envId);
        }
        if (message.appId !== "") {
            writer.uint32(34).string(message.appId);
        }
        if (message.appName !== "") {
            writer.uint32(42).string(message.appName);
        }
        if (message.functionId !== "") {
            writer.uint32(50).string(message.functionId);
        }
        if (message.functionSlug !== "") {
            writer.uint32(58).string(message.functionSlug);
        }
        if (message.stepId !== undefined) {
            writer.uint32(66).string(message.stepId);
        }
        if (message.requestPayload.length !== 0) {
            writer.uint32(74).bytes(message.requestPayload);
        }
        if (message.systemTraceCtx.length !== 0) {
            writer.uint32(82).bytes(message.systemTraceCtx);
        }
        if (message.userTraceCtx.length !== 0) {
            writer.uint32(90).bytes(message.userTraceCtx);
        }
        if (message.runId !== "") {
            writer.uint32(98).string(message.runId);
        }
        if (message.leaseId !== "") {
            writer.uint32(106).string(message.leaseId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGatewayExecutorRequestData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.accountId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.envId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.appId = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.appName = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.functionId = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.functionSlug = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.stepId = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.requestPayload = reader.bytes();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.systemTraceCtx = reader.bytes();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.userTraceCtx = reader.bytes();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.runId = reader.string();
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.leaseId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
            accountId: isSet(object.accountId) ? globalThis.String(object.accountId) : "",
            envId: isSet(object.envId) ? globalThis.String(object.envId) : "",
            appId: isSet(object.appId) ? globalThis.String(object.appId) : "",
            appName: isSet(object.appName) ? globalThis.String(object.appName) : "",
            functionId: isSet(object.functionId) ? globalThis.String(object.functionId) : "",
            functionSlug: isSet(object.functionSlug) ? globalThis.String(object.functionSlug) : "",
            stepId: isSet(object.stepId) ? globalThis.String(object.stepId) : undefined,
            requestPayload: isSet(object.requestPayload) ? bytesFromBase64(object.requestPayload) : new Uint8Array(0),
            systemTraceCtx: isSet(object.systemTraceCtx) ? bytesFromBase64(object.systemTraceCtx) : new Uint8Array(0),
            userTraceCtx: isSet(object.userTraceCtx) ? bytesFromBase64(object.userTraceCtx) : new Uint8Array(0),
            runId: isSet(object.runId) ? globalThis.String(object.runId) : "",
            leaseId: isSet(object.leaseId) ? globalThis.String(object.leaseId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.requestId !== "") {
            obj.requestId = message.requestId;
        }
        if (message.accountId !== "") {
            obj.accountId = message.accountId;
        }
        if (message.envId !== "") {
            obj.envId = message.envId;
        }
        if (message.appId !== "") {
            obj.appId = message.appId;
        }
        if (message.appName !== "") {
            obj.appName = message.appName;
        }
        if (message.functionId !== "") {
            obj.functionId = message.functionId;
        }
        if (message.functionSlug !== "") {
            obj.functionSlug = message.functionSlug;
        }
        if (message.stepId !== undefined) {
            obj.stepId = message.stepId;
        }
        if (message.requestPayload.length !== 0) {
            obj.requestPayload = base64FromBytes(message.requestPayload);
        }
        if (message.systemTraceCtx.length !== 0) {
            obj.systemTraceCtx = base64FromBytes(message.systemTraceCtx);
        }
        if (message.userTraceCtx.length !== 0) {
            obj.userTraceCtx = base64FromBytes(message.userTraceCtx);
        }
        if (message.runId !== "") {
            obj.runId = message.runId;
        }
        if (message.leaseId !== "") {
            obj.leaseId = message.leaseId;
        }
        return obj;
    },
    create(base) {
        return exports.GatewayExecutorRequestData.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        const message = createBaseGatewayExecutorRequestData();
        message.requestId = (_a = object.requestId) !== null && _a !== void 0 ? _a : "";
        message.accountId = (_b = object.accountId) !== null && _b !== void 0 ? _b : "";
        message.envId = (_c = object.envId) !== null && _c !== void 0 ? _c : "";
        message.appId = (_d = object.appId) !== null && _d !== void 0 ? _d : "";
        message.appName = (_e = object.appName) !== null && _e !== void 0 ? _e : "";
        message.functionId = (_f = object.functionId) !== null && _f !== void 0 ? _f : "";
        message.functionSlug = (_g = object.functionSlug) !== null && _g !== void 0 ? _g : "";
        message.stepId = (_h = object.stepId) !== null && _h !== void 0 ? _h : undefined;
        message.requestPayload = (_j = object.requestPayload) !== null && _j !== void 0 ? _j : new Uint8Array(0);
        message.systemTraceCtx = (_k = object.systemTraceCtx) !== null && _k !== void 0 ? _k : new Uint8Array(0);
        message.userTraceCtx = (_l = object.userTraceCtx) !== null && _l !== void 0 ? _l : new Uint8Array(0);
        message.runId = (_m = object.runId) !== null && _m !== void 0 ? _m : "";
        message.leaseId = (_o = object.leaseId) !== null && _o !== void 0 ? _o : "";
        return message;
    },
};
function createBaseWorkerRequestAckData() {
    return {
        requestId: "",
        accountId: "",
        envId: "",
        appId: "",
        functionSlug: "",
        stepId: undefined,
        systemTraceCtx: new Uint8Array(0),
        userTraceCtx: new Uint8Array(0),
        runId: "",
    };
}
exports.WorkerRequestAckData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        if (message.accountId !== "") {
            writer.uint32(18).string(message.accountId);
        }
        if (message.envId !== "") {
            writer.uint32(26).string(message.envId);
        }
        if (message.appId !== "") {
            writer.uint32(34).string(message.appId);
        }
        if (message.functionSlug !== "") {
            writer.uint32(42).string(message.functionSlug);
        }
        if (message.stepId !== undefined) {
            writer.uint32(50).string(message.stepId);
        }
        if (message.systemTraceCtx.length !== 0) {
            writer.uint32(58).bytes(message.systemTraceCtx);
        }
        if (message.userTraceCtx.length !== 0) {
            writer.uint32(66).bytes(message.userTraceCtx);
        }
        if (message.runId !== "") {
            writer.uint32(74).string(message.runId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWorkerRequestAckData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.accountId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.envId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.appId = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.functionSlug = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.stepId = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.systemTraceCtx = reader.bytes();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.userTraceCtx = reader.bytes();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.runId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
            accountId: isSet(object.accountId) ? globalThis.String(object.accountId) : "",
            envId: isSet(object.envId) ? globalThis.String(object.envId) : "",
            appId: isSet(object.appId) ? globalThis.String(object.appId) : "",
            functionSlug: isSet(object.functionSlug) ? globalThis.String(object.functionSlug) : "",
            stepId: isSet(object.stepId) ? globalThis.String(object.stepId) : undefined,
            systemTraceCtx: isSet(object.systemTraceCtx) ? bytesFromBase64(object.systemTraceCtx) : new Uint8Array(0),
            userTraceCtx: isSet(object.userTraceCtx) ? bytesFromBase64(object.userTraceCtx) : new Uint8Array(0),
            runId: isSet(object.runId) ? globalThis.String(object.runId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.requestId !== "") {
            obj.requestId = message.requestId;
        }
        if (message.accountId !== "") {
            obj.accountId = message.accountId;
        }
        if (message.envId !== "") {
            obj.envId = message.envId;
        }
        if (message.appId !== "") {
            obj.appId = message.appId;
        }
        if (message.functionSlug !== "") {
            obj.functionSlug = message.functionSlug;
        }
        if (message.stepId !== undefined) {
            obj.stepId = message.stepId;
        }
        if (message.systemTraceCtx.length !== 0) {
            obj.systemTraceCtx = base64FromBytes(message.systemTraceCtx);
        }
        if (message.userTraceCtx.length !== 0) {
            obj.userTraceCtx = base64FromBytes(message.userTraceCtx);
        }
        if (message.runId !== "") {
            obj.runId = message.runId;
        }
        return obj;
    },
    create(base) {
        return exports.WorkerRequestAckData.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseWorkerRequestAckData();
        message.requestId = (_a = object.requestId) !== null && _a !== void 0 ? _a : "";
        message.accountId = (_b = object.accountId) !== null && _b !== void 0 ? _b : "";
        message.envId = (_c = object.envId) !== null && _c !== void 0 ? _c : "";
        message.appId = (_d = object.appId) !== null && _d !== void 0 ? _d : "";
        message.functionSlug = (_e = object.functionSlug) !== null && _e !== void 0 ? _e : "";
        message.stepId = (_f = object.stepId) !== null && _f !== void 0 ? _f : undefined;
        message.systemTraceCtx = (_g = object.systemTraceCtx) !== null && _g !== void 0 ? _g : new Uint8Array(0);
        message.userTraceCtx = (_h = object.userTraceCtx) !== null && _h !== void 0 ? _h : new Uint8Array(0);
        message.runId = (_j = object.runId) !== null && _j !== void 0 ? _j : "";
        return message;
    },
};
function createBaseWorkerRequestExtendLeaseData() {
    return {
        requestId: "",
        accountId: "",
        envId: "",
        appId: "",
        functionSlug: "",
        stepId: undefined,
        systemTraceCtx: new Uint8Array(0),
        userTraceCtx: new Uint8Array(0),
        runId: "",
        leaseId: "",
    };
}
exports.WorkerRequestExtendLeaseData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        if (message.accountId !== "") {
            writer.uint32(18).string(message.accountId);
        }
        if (message.envId !== "") {
            writer.uint32(26).string(message.envId);
        }
        if (message.appId !== "") {
            writer.uint32(34).string(message.appId);
        }
        if (message.functionSlug !== "") {
            writer.uint32(42).string(message.functionSlug);
        }
        if (message.stepId !== undefined) {
            writer.uint32(50).string(message.stepId);
        }
        if (message.systemTraceCtx.length !== 0) {
            writer.uint32(58).bytes(message.systemTraceCtx);
        }
        if (message.userTraceCtx.length !== 0) {
            writer.uint32(66).bytes(message.userTraceCtx);
        }
        if (message.runId !== "") {
            writer.uint32(74).string(message.runId);
        }
        if (message.leaseId !== "") {
            writer.uint32(82).string(message.leaseId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWorkerRequestExtendLeaseData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.accountId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.envId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.appId = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.functionSlug = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.stepId = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.systemTraceCtx = reader.bytes();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.userTraceCtx = reader.bytes();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.runId = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.leaseId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
            accountId: isSet(object.accountId) ? globalThis.String(object.accountId) : "",
            envId: isSet(object.envId) ? globalThis.String(object.envId) : "",
            appId: isSet(object.appId) ? globalThis.String(object.appId) : "",
            functionSlug: isSet(object.functionSlug) ? globalThis.String(object.functionSlug) : "",
            stepId: isSet(object.stepId) ? globalThis.String(object.stepId) : undefined,
            systemTraceCtx: isSet(object.systemTraceCtx) ? bytesFromBase64(object.systemTraceCtx) : new Uint8Array(0),
            userTraceCtx: isSet(object.userTraceCtx) ? bytesFromBase64(object.userTraceCtx) : new Uint8Array(0),
            runId: isSet(object.runId) ? globalThis.String(object.runId) : "",
            leaseId: isSet(object.leaseId) ? globalThis.String(object.leaseId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.requestId !== "") {
            obj.requestId = message.requestId;
        }
        if (message.accountId !== "") {
            obj.accountId = message.accountId;
        }
        if (message.envId !== "") {
            obj.envId = message.envId;
        }
        if (message.appId !== "") {
            obj.appId = message.appId;
        }
        if (message.functionSlug !== "") {
            obj.functionSlug = message.functionSlug;
        }
        if (message.stepId !== undefined) {
            obj.stepId = message.stepId;
        }
        if (message.systemTraceCtx.length !== 0) {
            obj.systemTraceCtx = base64FromBytes(message.systemTraceCtx);
        }
        if (message.userTraceCtx.length !== 0) {
            obj.userTraceCtx = base64FromBytes(message.userTraceCtx);
        }
        if (message.runId !== "") {
            obj.runId = message.runId;
        }
        if (message.leaseId !== "") {
            obj.leaseId = message.leaseId;
        }
        return obj;
    },
    create(base) {
        return exports.WorkerRequestExtendLeaseData.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const message = createBaseWorkerRequestExtendLeaseData();
        message.requestId = (_a = object.requestId) !== null && _a !== void 0 ? _a : "";
        message.accountId = (_b = object.accountId) !== null && _b !== void 0 ? _b : "";
        message.envId = (_c = object.envId) !== null && _c !== void 0 ? _c : "";
        message.appId = (_d = object.appId) !== null && _d !== void 0 ? _d : "";
        message.functionSlug = (_e = object.functionSlug) !== null && _e !== void 0 ? _e : "";
        message.stepId = (_f = object.stepId) !== null && _f !== void 0 ? _f : undefined;
        message.systemTraceCtx = (_g = object.systemTraceCtx) !== null && _g !== void 0 ? _g : new Uint8Array(0);
        message.userTraceCtx = (_h = object.userTraceCtx) !== null && _h !== void 0 ? _h : new Uint8Array(0);
        message.runId = (_j = object.runId) !== null && _j !== void 0 ? _j : "";
        message.leaseId = (_k = object.leaseId) !== null && _k !== void 0 ? _k : "";
        return message;
    },
};
function createBaseWorkerRequestExtendLeaseAckData() {
    return { requestId: "", accountId: "", envId: "", appId: "", functionSlug: "", newLeaseId: undefined };
}
exports.WorkerRequestExtendLeaseAckData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        if (message.accountId !== "") {
            writer.uint32(18).string(message.accountId);
        }
        if (message.envId !== "") {
            writer.uint32(26).string(message.envId);
        }
        if (message.appId !== "") {
            writer.uint32(34).string(message.appId);
        }
        if (message.functionSlug !== "") {
            writer.uint32(42).string(message.functionSlug);
        }
        if (message.newLeaseId !== undefined) {
            writer.uint32(50).string(message.newLeaseId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWorkerRequestExtendLeaseAckData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.accountId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.envId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.appId = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.functionSlug = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.newLeaseId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
            accountId: isSet(object.accountId) ? globalThis.String(object.accountId) : "",
            envId: isSet(object.envId) ? globalThis.String(object.envId) : "",
            appId: isSet(object.appId) ? globalThis.String(object.appId) : "",
            functionSlug: isSet(object.functionSlug) ? globalThis.String(object.functionSlug) : "",
            newLeaseId: isSet(object.newLeaseId) ? globalThis.String(object.newLeaseId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.requestId !== "") {
            obj.requestId = message.requestId;
        }
        if (message.accountId !== "") {
            obj.accountId = message.accountId;
        }
        if (message.envId !== "") {
            obj.envId = message.envId;
        }
        if (message.appId !== "") {
            obj.appId = message.appId;
        }
        if (message.functionSlug !== "") {
            obj.functionSlug = message.functionSlug;
        }
        if (message.newLeaseId !== undefined) {
            obj.newLeaseId = message.newLeaseId;
        }
        return obj;
    },
    create(base) {
        return exports.WorkerRequestExtendLeaseAckData.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseWorkerRequestExtendLeaseAckData();
        message.requestId = (_a = object.requestId) !== null && _a !== void 0 ? _a : "";
        message.accountId = (_b = object.accountId) !== null && _b !== void 0 ? _b : "";
        message.envId = (_c = object.envId) !== null && _c !== void 0 ? _c : "";
        message.appId = (_d = object.appId) !== null && _d !== void 0 ? _d : "";
        message.functionSlug = (_e = object.functionSlug) !== null && _e !== void 0 ? _e : "";
        message.newLeaseId = (_f = object.newLeaseId) !== null && _f !== void 0 ? _f : undefined;
        return message;
    },
};
function createBaseSDKResponse() {
    return {
        requestId: "",
        accountId: "",
        envId: "",
        appId: "",
        status: 0,
        body: new Uint8Array(0),
        noRetry: false,
        retryAfter: undefined,
        sdkVersion: "",
        requestVersion: 0,
        systemTraceCtx: new Uint8Array(0),
        userTraceCtx: new Uint8Array(0),
        runId: "",
    };
}
exports.SDKResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        if (message.accountId !== "") {
            writer.uint32(18).string(message.accountId);
        }
        if (message.envId !== "") {
            writer.uint32(26).string(message.envId);
        }
        if (message.appId !== "") {
            writer.uint32(34).string(message.appId);
        }
        if (message.status !== 0) {
            writer.uint32(40).int32(message.status);
        }
        if (message.body.length !== 0) {
            writer.uint32(50).bytes(message.body);
        }
        if (message.noRetry !== false) {
            writer.uint32(56).bool(message.noRetry);
        }
        if (message.retryAfter !== undefined) {
            writer.uint32(66).string(message.retryAfter);
        }
        if (message.sdkVersion !== "") {
            writer.uint32(74).string(message.sdkVersion);
        }
        if (message.requestVersion !== 0) {
            writer.uint32(80).uint32(message.requestVersion);
        }
        if (message.systemTraceCtx.length !== 0) {
            writer.uint32(90).bytes(message.systemTraceCtx);
        }
        if (message.userTraceCtx.length !== 0) {
            writer.uint32(98).bytes(message.userTraceCtx);
        }
        if (message.runId !== "") {
            writer.uint32(106).string(message.runId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSDKResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.accountId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.envId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.appId = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.body = reader.bytes();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.noRetry = reader.bool();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.retryAfter = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.sdkVersion = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.requestVersion = reader.uint32();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.systemTraceCtx = reader.bytes();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.userTraceCtx = reader.bytes();
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.runId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
            accountId: isSet(object.accountId) ? globalThis.String(object.accountId) : "",
            envId: isSet(object.envId) ? globalThis.String(object.envId) : "",
            appId: isSet(object.appId) ? globalThis.String(object.appId) : "",
            status: isSet(object.status) ? sDKResponseStatusFromJSON(object.status) : 0,
            body: isSet(object.body) ? bytesFromBase64(object.body) : new Uint8Array(0),
            noRetry: isSet(object.noRetry) ? globalThis.Boolean(object.noRetry) : false,
            retryAfter: isSet(object.retryAfter) ? globalThis.String(object.retryAfter) : undefined,
            sdkVersion: isSet(object.sdkVersion) ? globalThis.String(object.sdkVersion) : "",
            requestVersion: isSet(object.requestVersion) ? globalThis.Number(object.requestVersion) : 0,
            systemTraceCtx: isSet(object.systemTraceCtx) ? bytesFromBase64(object.systemTraceCtx) : new Uint8Array(0),
            userTraceCtx: isSet(object.userTraceCtx) ? bytesFromBase64(object.userTraceCtx) : new Uint8Array(0),
            runId: isSet(object.runId) ? globalThis.String(object.runId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.requestId !== "") {
            obj.requestId = message.requestId;
        }
        if (message.accountId !== "") {
            obj.accountId = message.accountId;
        }
        if (message.envId !== "") {
            obj.envId = message.envId;
        }
        if (message.appId !== "") {
            obj.appId = message.appId;
        }
        if (message.status !== 0) {
            obj.status = sDKResponseStatusToJSON(message.status);
        }
        if (message.body.length !== 0) {
            obj.body = base64FromBytes(message.body);
        }
        if (message.noRetry !== false) {
            obj.noRetry = message.noRetry;
        }
        if (message.retryAfter !== undefined) {
            obj.retryAfter = message.retryAfter;
        }
        if (message.sdkVersion !== "") {
            obj.sdkVersion = message.sdkVersion;
        }
        if (message.requestVersion !== 0) {
            obj.requestVersion = Math.round(message.requestVersion);
        }
        if (message.systemTraceCtx.length !== 0) {
            obj.systemTraceCtx = base64FromBytes(message.systemTraceCtx);
        }
        if (message.userTraceCtx.length !== 0) {
            obj.userTraceCtx = base64FromBytes(message.userTraceCtx);
        }
        if (message.runId !== "") {
            obj.runId = message.runId;
        }
        return obj;
    },
    create(base) {
        return exports.SDKResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        const message = createBaseSDKResponse();
        message.requestId = (_a = object.requestId) !== null && _a !== void 0 ? _a : "";
        message.accountId = (_b = object.accountId) !== null && _b !== void 0 ? _b : "";
        message.envId = (_c = object.envId) !== null && _c !== void 0 ? _c : "";
        message.appId = (_d = object.appId) !== null && _d !== void 0 ? _d : "";
        message.status = (_e = object.status) !== null && _e !== void 0 ? _e : 0;
        message.body = (_f = object.body) !== null && _f !== void 0 ? _f : new Uint8Array(0);
        message.noRetry = (_g = object.noRetry) !== null && _g !== void 0 ? _g : false;
        message.retryAfter = (_h = object.retryAfter) !== null && _h !== void 0 ? _h : undefined;
        message.sdkVersion = (_j = object.sdkVersion) !== null && _j !== void 0 ? _j : "";
        message.requestVersion = (_k = object.requestVersion) !== null && _k !== void 0 ? _k : 0;
        message.systemTraceCtx = (_l = object.systemTraceCtx) !== null && _l !== void 0 ? _l : new Uint8Array(0);
        message.userTraceCtx = (_m = object.userTraceCtx) !== null && _m !== void 0 ? _m : new Uint8Array(0);
        message.runId = (_o = object.runId) !== null && _o !== void 0 ? _o : "";
        return message;
    },
};
function createBaseWorkerReplyAckData() {
    return { requestId: "" };
}
exports.WorkerReplyAckData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWorkerReplyAckData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.requestId !== "") {
            obj.requestId = message.requestId;
        }
        return obj;
    },
    create(base) {
        return exports.WorkerReplyAckData.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseWorkerReplyAckData();
        message.requestId = (_a = object.requestId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseConnMetadata() {
    return {
        id: "",
        gatewayId: "",
        instanceId: "",
        allWorkerGroups: {},
        syncedWorkerGroups: {},
        status: 0,
        lastHeartbeatAt: undefined,
        sdkLanguage: "",
        sdkVersion: "",
        attributes: undefined,
    };
}
exports.ConnMetadata = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.gatewayId !== "") {
            writer.uint32(18).string(message.gatewayId);
        }
        if (message.instanceId !== "") {
            writer.uint32(26).string(message.instanceId);
        }
        Object.entries(message.allWorkerGroups).forEach(([key, value]) => {
            exports.ConnMetadata_AllWorkerGroupsEntry.encode({ key: key, value }, writer.uint32(34).fork()).join();
        });
        Object.entries(message.syncedWorkerGroups).forEach(([key, value]) => {
            exports.ConnMetadata_SyncedWorkerGroupsEntry.encode({ key: key, value }, writer.uint32(42).fork()).join();
        });
        if (message.status !== 0) {
            writer.uint32(48).int32(message.status);
        }
        if (message.lastHeartbeatAt !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.lastHeartbeatAt), writer.uint32(58).fork()).join();
        }
        if (message.sdkLanguage !== "") {
            writer.uint32(66).string(message.sdkLanguage);
        }
        if (message.sdkVersion !== "") {
            writer.uint32(74).string(message.sdkVersion);
        }
        if (message.attributes !== undefined) {
            exports.SystemAttributes.encode(message.attributes, writer.uint32(82).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConnMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.gatewayId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.instanceId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    const entry4 = exports.ConnMetadata_AllWorkerGroupsEntry.decode(reader, reader.uint32());
                    if (entry4.value !== undefined) {
                        message.allWorkerGroups[entry4.key] = entry4.value;
                    }
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    const entry5 = exports.ConnMetadata_SyncedWorkerGroupsEntry.decode(reader, reader.uint32());
                    if (entry5.value !== undefined) {
                        message.syncedWorkerGroups[entry5.key] = entry5.value;
                    }
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.lastHeartbeatAt = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.sdkLanguage = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.sdkVersion = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.attributes = exports.SystemAttributes.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            gatewayId: isSet(object.gatewayId) ? globalThis.String(object.gatewayId) : "",
            instanceId: isSet(object.instanceId) ? globalThis.String(object.instanceId) : "",
            allWorkerGroups: isObject(object.allWorkerGroups)
                ? Object.entries(object.allWorkerGroups).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            syncedWorkerGroups: isObject(object.syncedWorkerGroups)
                ? Object.entries(object.syncedWorkerGroups).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            status: isSet(object.status) ? connectionStatusFromJSON(object.status) : 0,
            lastHeartbeatAt: isSet(object.lastHeartbeatAt) ? fromJsonTimestamp(object.lastHeartbeatAt) : undefined,
            sdkLanguage: isSet(object.sdkLanguage) ? globalThis.String(object.sdkLanguage) : "",
            sdkVersion: isSet(object.sdkVersion) ? globalThis.String(object.sdkVersion) : "",
            attributes: isSet(object.attributes) ? exports.SystemAttributes.fromJSON(object.attributes) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.gatewayId !== "") {
            obj.gatewayId = message.gatewayId;
        }
        if (message.instanceId !== "") {
            obj.instanceId = message.instanceId;
        }
        if (message.allWorkerGroups) {
            const entries = Object.entries(message.allWorkerGroups);
            if (entries.length > 0) {
                obj.allWorkerGroups = {};
                entries.forEach(([k, v]) => {
                    obj.allWorkerGroups[k] = v;
                });
            }
        }
        if (message.syncedWorkerGroups) {
            const entries = Object.entries(message.syncedWorkerGroups);
            if (entries.length > 0) {
                obj.syncedWorkerGroups = {};
                entries.forEach(([k, v]) => {
                    obj.syncedWorkerGroups[k] = v;
                });
            }
        }
        if (message.status !== 0) {
            obj.status = connectionStatusToJSON(message.status);
        }
        if (message.lastHeartbeatAt !== undefined) {
            obj.lastHeartbeatAt = message.lastHeartbeatAt.toISOString();
        }
        if (message.sdkLanguage !== "") {
            obj.sdkLanguage = message.sdkLanguage;
        }
        if (message.sdkVersion !== "") {
            obj.sdkVersion = message.sdkVersion;
        }
        if (message.attributes !== undefined) {
            obj.attributes = exports.SystemAttributes.toJSON(message.attributes);
        }
        return obj;
    },
    create(base) {
        return exports.ConnMetadata.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseConnMetadata();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.gatewayId = (_b = object.gatewayId) !== null && _b !== void 0 ? _b : "";
        message.instanceId = (_c = object.instanceId) !== null && _c !== void 0 ? _c : "";
        message.allWorkerGroups = Object.entries((_d = object.allWorkerGroups) !== null && _d !== void 0 ? _d : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.syncedWorkerGroups = Object.entries((_e = object.syncedWorkerGroups) !== null && _e !== void 0 ? _e : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.status = (_f = object.status) !== null && _f !== void 0 ? _f : 0;
        message.lastHeartbeatAt = (_g = object.lastHeartbeatAt) !== null && _g !== void 0 ? _g : undefined;
        message.sdkLanguage = (_h = object.sdkLanguage) !== null && _h !== void 0 ? _h : "";
        message.sdkVersion = (_j = object.sdkVersion) !== null && _j !== void 0 ? _j : "";
        message.attributes = (object.attributes !== undefined && object.attributes !== null)
            ? exports.SystemAttributes.fromPartial(object.attributes)
            : undefined;
        return message;
    },
};
function createBaseConnMetadata_AllWorkerGroupsEntry() {
    return { key: "", value: "" };
}
exports.ConnMetadata_AllWorkerGroupsEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConnMetadata_AllWorkerGroupsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.ConnMetadata_AllWorkerGroupsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseConnMetadata_AllWorkerGroupsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseConnMetadata_SyncedWorkerGroupsEntry() {
    return { key: "", value: "" };
}
exports.ConnMetadata_SyncedWorkerGroupsEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConnMetadata_SyncedWorkerGroupsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.ConnMetadata_SyncedWorkerGroupsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseConnMetadata_SyncedWorkerGroupsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseSystemAttributes() {
    return { cpuCores: 0, memBytes: 0, os: "" };
}
exports.SystemAttributes = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.cpuCores !== 0) {
            writer.uint32(8).int32(message.cpuCores);
        }
        if (message.memBytes !== 0) {
            writer.uint32(16).int64(message.memBytes);
        }
        if (message.os !== "") {
            writer.uint32(26).string(message.os);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSystemAttributes();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.cpuCores = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.memBytes = longToNumber(reader.int64());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.os = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            cpuCores: isSet(object.cpuCores) ? globalThis.Number(object.cpuCores) : 0,
            memBytes: isSet(object.memBytes) ? globalThis.Number(object.memBytes) : 0,
            os: isSet(object.os) ? globalThis.String(object.os) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.cpuCores !== 0) {
            obj.cpuCores = Math.round(message.cpuCores);
        }
        if (message.memBytes !== 0) {
            obj.memBytes = Math.round(message.memBytes);
        }
        if (message.os !== "") {
            obj.os = message.os;
        }
        return obj;
    },
    create(base) {
        return exports.SystemAttributes.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseSystemAttributes();
        message.cpuCores = (_a = object.cpuCores) !== null && _a !== void 0 ? _a : 0;
        message.memBytes = (_b = object.memBytes) !== null && _b !== void 0 ? _b : 0;
        message.os = (_c = object.os) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseConnGroup() {
    return { envId: "", appId: "", appName: "", hash: "", conns: [], syncId: undefined, appVersion: undefined };
}
exports.ConnGroup = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.envId !== "") {
            writer.uint32(10).string(message.envId);
        }
        if (message.appId !== "") {
            writer.uint32(18).string(message.appId);
        }
        if (message.appName !== "") {
            writer.uint32(26).string(message.appName);
        }
        if (message.hash !== "") {
            writer.uint32(34).string(message.hash);
        }
        for (const v of message.conns) {
            exports.ConnMetadata.encode(v, writer.uint32(42).fork()).join();
        }
        if (message.syncId !== undefined) {
            writer.uint32(50).string(message.syncId);
        }
        if (message.appVersion !== undefined) {
            writer.uint32(58).string(message.appVersion);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConnGroup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.envId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.appId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.appName = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.hash = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.conns.push(exports.ConnMetadata.decode(reader, reader.uint32()));
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.syncId = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.appVersion = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            envId: isSet(object.envId) ? globalThis.String(object.envId) : "",
            appId: isSet(object.appId) ? globalThis.String(object.appId) : "",
            appName: isSet(object.appName) ? globalThis.String(object.appName) : "",
            hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
            conns: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.conns) ? object.conns.map((e) => exports.ConnMetadata.fromJSON(e)) : [],
            syncId: isSet(object.syncId) ? globalThis.String(object.syncId) : undefined,
            appVersion: isSet(object.appVersion) ? globalThis.String(object.appVersion) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.envId !== "") {
            obj.envId = message.envId;
        }
        if (message.appId !== "") {
            obj.appId = message.appId;
        }
        if (message.appName !== "") {
            obj.appName = message.appName;
        }
        if (message.hash !== "") {
            obj.hash = message.hash;
        }
        if ((_a = message.conns) === null || _a === void 0 ? void 0 : _a.length) {
            obj.conns = message.conns.map((e) => exports.ConnMetadata.toJSON(e));
        }
        if (message.syncId !== undefined) {
            obj.syncId = message.syncId;
        }
        if (message.appVersion !== undefined) {
            obj.appVersion = message.appVersion;
        }
        return obj;
    },
    create(base) {
        return exports.ConnGroup.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseConnGroup();
        message.envId = (_a = object.envId) !== null && _a !== void 0 ? _a : "";
        message.appId = (_b = object.appId) !== null && _b !== void 0 ? _b : "";
        message.appName = (_c = object.appName) !== null && _c !== void 0 ? _c : "";
        message.hash = (_d = object.hash) !== null && _d !== void 0 ? _d : "";
        message.conns = ((_e = object.conns) === null || _e === void 0 ? void 0 : _e.map((e) => exports.ConnMetadata.fromPartial(e))) || [];
        message.syncId = (_f = object.syncId) !== null && _f !== void 0 ? _f : undefined;
        message.appVersion = (_g = object.appVersion) !== null && _g !== void 0 ? _g : undefined;
        return message;
    },
};
function createBaseStartResponse() {
    return { connectionId: "", gatewayEndpoint: "", gatewayGroup: "", sessionToken: "", syncToken: "" };
}
exports.StartResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.connectionId !== "") {
            writer.uint32(10).string(message.connectionId);
        }
        if (message.gatewayEndpoint !== "") {
            writer.uint32(18).string(message.gatewayEndpoint);
        }
        if (message.gatewayGroup !== "") {
            writer.uint32(26).string(message.gatewayGroup);
        }
        if (message.sessionToken !== "") {
            writer.uint32(34).string(message.sessionToken);
        }
        if (message.syncToken !== "") {
            writer.uint32(42).string(message.syncToken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStartResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.connectionId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.gatewayEndpoint = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.gatewayGroup = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.sessionToken = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.syncToken = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            connectionId: isSet(object.connectionId) ? globalThis.String(object.connectionId) : "",
            gatewayEndpoint: isSet(object.gatewayEndpoint) ? globalThis.String(object.gatewayEndpoint) : "",
            gatewayGroup: isSet(object.gatewayGroup) ? globalThis.String(object.gatewayGroup) : "",
            sessionToken: isSet(object.sessionToken) ? globalThis.String(object.sessionToken) : "",
            syncToken: isSet(object.syncToken) ? globalThis.String(object.syncToken) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.connectionId !== "") {
            obj.connectionId = message.connectionId;
        }
        if (message.gatewayEndpoint !== "") {
            obj.gatewayEndpoint = message.gatewayEndpoint;
        }
        if (message.gatewayGroup !== "") {
            obj.gatewayGroup = message.gatewayGroup;
        }
        if (message.sessionToken !== "") {
            obj.sessionToken = message.sessionToken;
        }
        if (message.syncToken !== "") {
            obj.syncToken = message.syncToken;
        }
        return obj;
    },
    create(base) {
        return exports.StartResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseStartResponse();
        message.connectionId = (_a = object.connectionId) !== null && _a !== void 0 ? _a : "";
        message.gatewayEndpoint = (_b = object.gatewayEndpoint) !== null && _b !== void 0 ? _b : "";
        message.gatewayGroup = (_c = object.gatewayGroup) !== null && _c !== void 0 ? _c : "";
        message.sessionToken = (_d = object.sessionToken) !== null && _d !== void 0 ? _d : "";
        message.syncToken = (_e = object.syncToken) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseStartRequest() {
    return { excludeGateways: [] };
}
exports.StartRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.excludeGateways) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStartRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.excludeGateways.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            excludeGateways: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.excludeGateways)
                ? object.excludeGateways.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.excludeGateways) === null || _a === void 0 ? void 0 : _a.length) {
            obj.excludeGateways = message.excludeGateways;
        }
        return obj;
    },
    create(base) {
        return exports.StartRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseStartRequest();
        message.excludeGateways = ((_a = object.excludeGateways) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseFlushResponse() {
    return { requestId: "" };
}
exports.FlushResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFlushResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.requestId !== "") {
            obj.requestId = message.requestId;
        }
        return obj;
    },
    create(base) {
        return exports.FlushResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseFlushResponse();
        message.requestId = (_a = object.requestId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBasePubSubAckMessage() {
    return { ts: undefined, nack: undefined, nackReason: undefined };
}
exports.PubSubAckMessage = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.ts !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.ts), writer.uint32(10).fork()).join();
        }
        if (message.nack !== undefined) {
            writer.uint32(16).bool(message.nack);
        }
        if (message.nackReason !== undefined) {
            exports.SystemError.encode(message.nackReason, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePubSubAckMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.ts = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.nack = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.nackReason = exports.SystemError.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            ts: isSet(object.ts) ? fromJsonTimestamp(object.ts) : undefined,
            nack: isSet(object.nack) ? globalThis.Boolean(object.nack) : undefined,
            nackReason: isSet(object.nackReason) ? exports.SystemError.fromJSON(object.nackReason) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.ts !== undefined) {
            obj.ts = message.ts.toISOString();
        }
        if (message.nack !== undefined) {
            obj.nack = message.nack;
        }
        if (message.nackReason !== undefined) {
            obj.nackReason = exports.SystemError.toJSON(message.nackReason);
        }
        return obj;
    },
    create(base) {
        return exports.PubSubAckMessage.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBasePubSubAckMessage();
        message.ts = (_a = object.ts) !== null && _a !== void 0 ? _a : undefined;
        message.nack = (_b = object.nack) !== null && _b !== void 0 ? _b : undefined;
        message.nackReason = (object.nackReason !== undefined && object.nackReason !== null)
            ? exports.SystemError.fromPartial(object.nackReason)
            : undefined;
        return message;
    },
};
function createBaseSystemError() {
    return { code: "", data: undefined, message: "" };
}
exports.SystemError = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.code !== "") {
            writer.uint32(10).string(message.code);
        }
        if (message.data !== undefined) {
            writer.uint32(18).bytes(message.data);
        }
        if (message.message !== "") {
            writer.uint32(26).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSystemError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.code = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            code: isSet(object.code) ? globalThis.String(object.code) : "",
            data: isSet(object.data) ? bytesFromBase64(object.data) : undefined,
            message: isSet(object.message) ? globalThis.String(object.message) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.code !== "") {
            obj.code = message.code;
        }
        if (message.data !== undefined) {
            obj.data = base64FromBytes(message.data);
        }
        if (message.message !== "") {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return exports.SystemError.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseSystemError();
        message.code = (_a = object.code) !== null && _a !== void 0 ? _a : "";
        message.data = (_b = object.data) !== null && _b !== void 0 ? _b : undefined;
        message.message = (_c = object.message) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=connect.js.map